services:
  db:
    image: postgres:15-alpine
    container_name: db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app}
      TZ: Europe/Paris
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-app} -d ${POSTGRES_DB:-app}"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data

  web:
    build:
      context: .
      dockerfile: docker/web/Dockerfile
    container_name: web
    restart: unless-stopped
    env_file: .env
    environment:
      # На всякий случай, если в settings читаешь эти пути из ENV:
      STATIC_ROOT: /static
      MEDIA_ROOT: /media
      DATABASE_URL: ${DATABASE_URL:-postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-app}@db:5432/${POSTGRES_DB:-app}}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://redis:6379/0}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND:-redis://redis:6379/1}
      TZ: Europe/Paris
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - static:/static
      - media:/media
    # Порт web наружу не открываем — ходим через nginx
    expose:
      - "8000"

  celery:
    build:
      context: .
      dockerfile: docker/web/Dockerfile
    container_name: celery
    restart: unless-stopped
    env_file: .env
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-app}@db:5432/${POSTGRES_DB:-app}}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://redis:6379/0}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND:-redis://redis:6379/1}
      TZ: Europe/Paris
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      web:
        condition: service_started
    command: >
      celery -A config worker -l INFO --queues=default

  beat:
    build:
      context: .
      dockerfile: docker/web/Dockerfile
    container_name: beat
    restart: unless-stopped
    env_file: .env
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-app}@db:5432/${POSTGRES_DB:-app}}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://redis:6379/0}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND:-redis://redis:6379/1}
      TZ: Europe/Paris
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      web:
        condition: service_started
    # Если используешь django-celery-beat — оставь scheduler; если нет, убери этот флаг
    command: >
      celery -A config beat -l INFO
      --scheduler django_celery_beat.schedulers:DatabaseScheduler

  nginx:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    container_name: nginx
    restart: unless-stopped
    depends_on:
      web:
        condition: service_started
    ports:
      - "80:80"
    volumes:
      - static:/static:ro
      - media:/media:ro

volumes:
  pgdata:
  redisdata:
  static:
  media:
